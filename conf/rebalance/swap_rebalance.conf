### MIGRATED FROM TESTRUNNER tests ###
rebalance_new.swaprebalancetests.SwapRebalanceBasicTests:
    do_test,replica=2,num-buckets=3,num-swap=1,GROUP=P1;default
    do_test,replica=1,num-buckets=9,num-swap=2,GROUP=P2
    do_test,replica=1,num-buckets=1,num-swap=2,GROUP=P0;default

#Swap orchestrator
    do_test,replica=1,num-buckets=2,num-swap=2,swap-orchestrator=True,GROUP=P1;default
    do_test,replica=1,num-buckets=7,num-swap=2,swap-orchestrator=True,GROUP=P2
    do_test,replica=1,num-buckets=10,num-swap=1,swap-orchestrator=True,GROUP=P2
    do_test,replica=2,num-buckets=4,num-swap=1,swap-orchestrator=True,GROUP=P0;default

## Replica update cases ##
    do_test,nodes_init=4,replicas=2,standard_buckets=3,num-swap=1,new_replica=1,GROUP=P1;default
    do_test,nodes_init=4,replicas=1,standard_buckets=9,num-swap=2,new_replica=2,GROUP=P2
    do_test,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,new_replica=3,GROUP=P0;default

# Swap orchestrator
    do_test,nodes_init=4,replicas=1,standard_buckets=2,num-swap=2,swap-orchestrator=True,new_replica=2,GROUP=P1;default
    do_test,nodes_init=4,replicas=1,standard_buckets=7,num-swap=2,swap-orchestrator=True,new_replica=3,GROUP=P2
    do_test,nodes_init=4,replicas=1,standard_buckets=10,num-swap=1,swap-orchestrator=True,new_replica=2,GROUP=P2
    do_test,nodes_init=2,replicas=2,standard_buckets=4,num-swap=1,swap-orchestrator=True,new_replica=1,GROUP=P0;default

### Mad-hatter's Durability tests ###
rebalance_new.swaprebalancetests.SwapRebalanceBasicTests:
    do_test,nodes_init=4,replicas=2,standard_buckets=3,num-swap=1,GROUP=P1;durability
    do_test,nodes_init=4,replicas=1,standard_buckets=9,num-swap=2,GROUP=P2;durability
    do_test,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,GROUP=P0;MHbeta;durability
    do_test,nodes_init=2,replicas=1,standard_buckets=1,num-swap=1,GROUP=P0;durability

# Swap orchestrator
    do_test,nodes_init=4,replicas=1,standard_buckets=2,num-swap=2,swap-orchestrator=True,GROUP=P1;durability
    do_test,nodes_init=4,replicas=1,standard_buckets=7,num-swap=2,swap-orchestrator=True,GROUP=P2;durability
    do_test,nodes_init=4,replicas=1,standard_buckets=10,num-swap=1,swap-orchestrator=True,GROUP=P2;durability
    do_test,nodes_init=2,replicas=2,standard_buckets=4,num-swap=1,swap-orchestrator=True,GROUP=P0;MHbeta;durability

## Replica update cases ##
    do_test,nodes_init=4,replicas=2,standard_buckets=3,num-swap=1,new_replica=1,GROUP=P1;durability
    do_test,nodes_init=4,replicas=1,standard_buckets=9,num-swap=2,new_replica=2,GROUP=P2;durability
    do_test,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,new_replica=2,GROUP=P0;MHbeta;durability

# Swap orchestrator
    do_test,nodes_init=4,replicas=1,standard_buckets=2,num-swap=2,swap-orchestrator=True,new_replica=2,GROUP=P1;durability
    do_test,nodes_init=4,replicas=1,standard_buckets=7,num-swap=2,swap-orchestrator=True,new_replica=2,GROUP=P2;durability
    do_test,nodes_init=4,replicas=1,standard_buckets=10,num-swap=1,swap-orchestrator=True,new_replica=2,GROUP=P2;durability
    do_test,nodes_init=2,replicas=2,standard_buckets=4,num-swap=1,swap-orchestrator=True,new_replica=1,GROUP=P0;durability

rebalance_new.swaprebalancetests.SwapRebalanceFailedTests:
	# Multiple Failed rebalances : by killing memcached
    test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,percentage_progress=40,GROUP=P0;default
    test_failed_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=3,num-swap=1,percentage_progress=60,GROUP=P1;default
    test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=4,num-swap=2,swap-orchestrator=True,percentage_progress=30,GROUP=P0;default
    test_failed_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=2,num-swap=2,swap-orchestrator=True,percentage_progress=80,GROUP=P1;default

    # Add back some node after failing it over
    test_add_back_failed_node,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,GROUP=P0;default
    test_add_back_failed_node,nodes_init=4,replicas=2,standard_buckets=3,num-swap=2,GROUP=P1;default
    test_add_back_failed_node,nodes_init=4,replicas=2,standard_buckets=2,num-swap=2,swap-orchestrator=True,GROUP=P0;default
    test_add_back_failed_node,nodes_init=4,replicas=3,standard_buckets=5,num-swap=2,swap-orchestrator=True,GROUP=P1

    # Swap rebalance with failed nodes
    test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,GROUP=P0;default
    test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=3,num-swap=2,GROUP=P1;default
    test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=4,num-swap=1,swap-orchestrator=True,GROUP=P1;default
    test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,swap-orchestrator=True,GROUP=P1;default

## Replica update cases ##
    test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,new_replica=2,percentage_progress=40,GROUP=P0;default
    test_failed_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=3,num-swap=1,new_replica=1,percentage_progress=60,GROUP=P1;default
    test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=4,num-swap=2,new_replica=3,swap-orchestrator=True,percentage_progress=30,GROUP=P0;default
    test_failed_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=2,num-swap=2,new_replica=1,swap-orchestrator=True,percentage_progress=80,GROUP=P1;default

    # Swap rebalance with failed nodes
    test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,new_replica=2,GROUP=P0;default
    test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=3,num-swap=2,new_replica=3,GROUP=P1;default
    test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=4,num-swap=1,swap-orchestrator=True,new_replica=2,GROUP=P1;default
    test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,swap-orchestrator=True,new_replica=2,GROUP=P1;default

### MAD-HATTER'S DURABILITY CASES ###
    test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,percentage_progress=40,GROUP=P0;durability
    test_failed_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=3,num-swap=1,percentage_progress=60,GROUP=P1;durability
    test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=4,num-swap=2,swap-orchestrator=True,percentage_progress=30,GROUP=P1;durability
    test_failed_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=2,num-swap=2,swap-orchestrator=True,percentage_progress=80,GROUP=P1;durability

    # Add back some node after failing it over
    test_add_back_failed_node,nodes_init=4,replicas=1,standard_buckets=1,num-swap=1,GROUP=P0;durability
    test_add_back_failed_node,nodes_init=4,replicas=2,standard_buckets=2,num-swap=2,swap-orchestrator=True,GROUP=P0;durability

    # Swap rebalance with failed nodes
    test_failover_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=1,num-swap=2,GROUP=P0;durability
    test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=4,num-swap=1,swap-orchestrator=True,GROUP=P1;durability

## Replica update cases ##
    test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,new_replica=2,percentage_progress=40,GROUP=P0;durability
    test_failed_swap_rebalance,nodes_init=3,replicas=1,standard_buckets=4,num-swap=2,new_replica=2,swap-orchestrator=True,percentage_progress=30,GROUP=P1;durability
    test_failed_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=3,num-swap=1,new_replica=1,percentage_progress=60,GROUP=P1;durability
    test_failed_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=2,num-swap=2,new_replica=1,swap-orchestrator=True,percentage_progress=80,GROUP=P1;durability

    # Add back some node after failing it over
    test_add_back_failed_node,nodes_init=4,replicas=1,standard_buckets=1,num-swap=1,new_replica=2,GROUP=P0;durability
    test_add_back_failed_node,nodes_init=4,replicas=2,standard_buckets=3,num-swap=2,new_replica=1,GROUP=P1;durability

    # Swap rebalance with failed nodes
    test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=1,new_replica=2,GROUP=P0;durability
    test_failover_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=4,num-swap=2,swap-orchestrator=True,new_replica=1,GROUP=P1;durability
    test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=1,swap-orchestrator=True,new_replica=2,GROUP=P1;durability

rebalance_new.swaprebalancetests.SwapRebalanceStartStopTests:
    do_test,nodes_init=4,replicas=1,standard_buckets=1,num-swap=1,GROUP=P0;default
    do_test,nodes_init=4,replicas=2,standard_buckets=4,num-swap=2,GROUP=P1;default
    do_test,nodes_init=4,replicas=3,standard_buckets=4,num-swap=2,GROUP=P1;default
    do_test,nodes_init=4,replicas=2,standard_buckets=1,num-swap=2,swap-orchestrator=True,GROUP=P1;default
    do_test,nodes_init=4,replicas=1,standard_buckets=3,num-swap=2,swap-orchestrator=True,GROUP=P0;default

    # Replica update tests
    do_test,nodes_init=4,replicas=1,standard_buckets=1,num-swap=1,new_replica=2,GROUP=P0;default
    do_test,nodes_init=4,replicas=2,standard_buckets=4,num-swap=2,new_replica=1,GROUP=P1;default
    do_test,nodes_init=4,replicas=3,standard_buckets=4,num-swap=2,new_replica=1,GROUP=P1;default
    do_test,nodes_init=4,replicas=2,standard_buckets=1,num-swap=2,swap-orchestrator=True,new_replica=3,GROUP=P1;default
    do_test,nodes_init=4,replicas=1,standard_buckets=3,num-swap=2,swap-orchestrator=True,new_replica=3,GROUP=P0;default

### MAD-HATTER'S DURABILITY CASES ###
    do_test,replicas=1,nodes_init=2,standard_buckets=1,num-swap=1,GROUP=P0;durability
    do_test,replicas=2,nodes_init=3,standard_buckets=2,num-swap=2,GROUP=P1;durability
    #do_test,replicas=3,nodes_init=4,standard_buckets=1,num-swap=3,GROUP=P1;durability

    # Replica update tests
    do_test,replicas=1,nodes_init=2,standard_buckets=1,num-swap=1,new_replica=2,GROUP=P0;durability
    do_test,replicas=2,nodes_init=3,standard_buckets=2,num-swap=2,new_replica=1,GROUP=P1;durability
    #do_test,replicas=3,nodes_init=4,standard_buckets=1,num-swap=3,new_replica=2,GROUP=P1;durability
