rebalance_new.swaprebalancetests.SwapRebalanceBasicTests:
    do_test,nodes_init=3,replicas=2,standard_buckets=3,num-swap=1,binary_transactions=True,GROUP=P1;P0_Set1
    do_test,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,GROUP=P0;MHBeta;windows

    # Swap orchestrator
    do_test,nodes_init=4,replicas=1,standard_buckets=2,num-swap=2,swap-orchestrator=True,GROUP=P1;P0_Set1

    # Replica update cases
    # num_swap=1, replicas=1 and varying number of buckets
    do_test,nodes_init=4,replicas=2,standard_buckets=3,num-swap=1,new_replica=1,GROUP=P1;P0_Set1

    # Swap orchestrator
    do_test,nodes_init=4,replicas=1,standard_buckets=2,num-swap=2,swap-orchestrator=True,new_replica=2,GROUP=P1;MHBeta


rebalance_new.swaprebalancetests.SwapRebalanceFailedTests:
    # Multiple Failed rebalances : by killing memcached
    test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=4,num-swap=1,swap-orchestrator=True,percentage_progress=30,GROUP=P0_Set1;default

    # Add back some node after failing it over
    #test_add_back_failed_node,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,GROUP=P0_Set1;default;dataloss might happen so commenting the test
    test_add_back_failed_node,nodes_init=4,replicas=1,standard_buckets=1,num-swap=1,GROUP=P0_Set1;default
    test_add_back_failed_node,nodes_init=4,replicas=2,standard_buckets=1,num-swap=2,GROUP=P0_Set1;default
    test_add_back_failed_node,nodes_init=4,replicas=2,standard_buckets=2,num-swap=2,swap-orchestrator=True,GROUP=P0_Set1;default

    # Swap rebalance with failed nodes
    test_failover_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=1,num-swap=2,GROUP=P0_Set1;default

## Replica update cases ##
    test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,new_replica=2,percentage_progress=40,GROUP=P0_Set2;default
    test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=4,num-swap=2,new_replica=3,swap-orchestrator=True,percentage_progress=30,GROUP=P0_Set2;default

    # Swap rebalance with failed nodes
    test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,new_replica=2,binary_transactions=True,GROUP=P0_Set2;default

    ### MAD-HATTER'S DURABILITY CASES ###
    test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,percentage_progress=40,GROUP=P0_Set2;durability

    # Add back some node after failing it over
    test_add_back_failed_node,nodes_init=4,replicas=1,standard_buckets=1,num-swap=1,binary_transactions=True,GROUP=P0_Set2;durability
    test_add_back_failed_node,nodes_init=4,replicas=2,standard_buckets=2,num-swap=2,swap-orchestrator=True,GROUP=P0_Set2;durability

    # Swap rebalance with failed nodes
    test_failover_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=1,num-swap=1,GROUP=P0_Set2;durability

    ## Replica update cases ##
    test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,new_replica=2,percentage_progress=40,GROUP=P0_Set2;durability

    # Add back some node after failing it over
    test_add_back_failed_node,nodes_init=4,replicas=1,standard_buckets=1,num-swap=1,new_replica=2,GROUP=P0_Set2;durability

    # Swap rebalance with failed nodes
    test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=1,new_replica=2,GROUP=P0_Set2;durability

rebalance_new.swaprebalancetests.SwapRebalanceStartStopTests:
    do_test,nodes_init=4,replicas=1,standard_buckets=1,num-swap=1,binary_transactions=True,GROUP=P0_Set2;default
    do_test,nodes_init=4,replicas=1,standard_buckets=3,num-swap=2,swap-orchestrator=True,GROUP=P0_Set2;default

    # Replica update tests
    do_test,nodes_init=4,replicas=1,standard_buckets=1,num-swap=1,new_replica=2,GROUP=P0_Set2;default
    do_test,nodes_init=4,replicas=1,standard_buckets=3,num-swap=2,swap-orchestrator=True,new_replica=3,GROUP=P0_Set2;default
